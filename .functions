# Simple calculator
function calc() {
  local result="";
  result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')";
  #                       └─ default (when `--mathlib` is used) is 20
  #
  if [[ "$result" == *.* ]]; then
    # improve the output for decimal numbers
    printf "$result" |
    sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
        -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
        -e 's/0*$//;s/\.$//';  # remove trailing zeros
  else
    printf "$result";
  fi;
  printf "\n";
}

# Create a new directory and enter it
function mkd() {
  mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
  cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
  local tmpFile="${@%/}.tar";
  tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

  size=$(
    stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
    stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
  );

  local cmd="";
  if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
    # the .tar file is smaller than 50 MB and Zopfli is available; use it
    cmd="zopfli";
  else
    if hash pigz 2> /dev/null; then
      cmd="pigz";
    else
      cmd="gzip";
    fi;
  fi;

  echo "Compressing .tar using \`${cmd}\`…";
  "${cmd}" -v "${tmpFile}" || return 1;
  [ -f "${tmpFile}" ] && rm "${tmpFile}";
  echo "${tmpFile}.gz created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh;
  else
    local arg=-sh;
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@";
  else
    du $arg .[^.]* *;
  fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
  function diff() {
    git diff --no-index --color-words "$@";
  }
fi;

# Create a data URL from a file
function dataurl() {
  local mimeType=$(file -b --mime-type "$1");
  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8";
  fi
  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Create a git.io short URL
function gitio() {
  if [ -z "${1}" -o -z "${2}" ]; then
    echo "Usage: \`gitio slug url\`";
    return 1;
  fi;
  curl -i http://git.io/ -F "url=${2}" -F "code=${1}";
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
  local port="${1:-8000}";
  sleep 1 && open "http://localhost:${port}/" &
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
  local port="${1:-4000}";
  local ip=$(ipconfig getifaddr en1);
  sleep 1 && open "http://${ip}:${port}/" &
  php -S "${ip}:${port}";
}

# Compare original and gzipped file size
function gz() {
  local origsize=$(wc -c < "$1");
  local gzipsize=$(gzip -c "$1" | wc -c);
  local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
  printf "orig: %d bytes\n" "$origsize";
  printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
  if [ -t 0 ]; then # argument
    python -mjson.tool <<< "$*" | pygmentize -l javascript;
  else # pipe
    python -mjson.tool | pygmentize -l javascript;
  fi;
}

# Run `dig` and display the most useful info
function digga() {
  dig +nocmd "$1" any +multiline +noall +answer;
}

# UTF-8-encode a string of Unicode symbols
function escape() {
  printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo ""; # newline
  fi;
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
  perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo ""; # newline
  fi;
}

# Get a character’s Unicode code point
function codepoint() {
  perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))";
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo ""; # newline
  fi;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
  if [ -z "${1}" ]; then
    echo "ERROR: No domain specified.";
    return 1;
  fi;

  local domain="${1}";
  echo "Testing ${domain}…";
  echo ""; # newline

  local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
    | openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

  if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
    local certText=$(echo "${tmp}" \
      | openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
      no_serial, no_sigdump, no_signame, no_validity, no_version");
    echo "Common Name:";
    echo ""; # newline
    echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
    echo ""; # newline
    echo "Subject Alternative Name(s):";
    echo ""; # newline
    echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
      | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
    return 0;
  else
    echo "ERROR: Certificate not found.";
    return 1;
  fi;
}

# `idea` with no args opens IntelliJ
function idea() {
if [ $# -eq 0 ]; then
  "/Applications/IntelliJ IDEA 14 CE.app/Contents/MacOS/idea";
else
  "/Applications/IntelliJ IDEA 14 CE.app/Contents/MacOS/idea" "$@";
fi;

}

# `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
function s() {
  if [ $# -eq 0 ]; then
    subl .;
  else
    subl "$@";
  fi;
}

# `a` with no arguments opens the current directory in Atom Editor, otherwise
# opens the given location
function a() {
  if [ $# -eq 0 ]; then
    atom .;
  else
    atom "$@";
  fi;
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v() {
  if [ $# -eq 0 ]; then
    vim .;
  else
    vim "$@";
  fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
  if [ $# -eq 0 ]; then
    open .;
  else
    open "$@";
  fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
  tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

function mvv() {
  if [ $# -eq 0 ]; then
    mvn versions:set -DgenerateBackupPoms=false -DautoVersionSubmodules=true;
  else
    mvn versions:set -DnewVersion=$@ -DgenerateBackupPoms=false -DautoVersionSubmodules=true;
  fi;
}

function buildapp() {
  if [ -z "${1}" ]; then
    echo "ERROR: No docker tag specified.";
    return 1;
  fi;
  local dockertag="${1}";
  local ip=$(ipconfig getifaddr en0);

  echo "Local IP Address is ${ip}"
  echo "Building Tag ${dockertag}"

  nvm install 6.9.1
  gulp && docker build -t mystrength/app:${dockertag} .
  docker rm -f $(docker ps -a | grep app.mystrength.dev | awk '{print $1}')  > /dev/null 2>&1
  docker run -d -t \
     -e "MYSTRENGTH_ENV=dev" \
    -e "VIRTUAL_HOST=app.mystrength.dev,app-gemini.mystrength.dev" \
    -e VIRTUAL_PORT=80 \
    -h app.mystrength.dev  --name app.mystrength.dev \
    mystrength/app:${dockertag}
}

function buildadmin() {
  if [ -z "${1}" ]; then
    echo "ERROR: No docker tag specified.";
    return 1;
  fi;
  local dockertag="${1}";
  local ip=$(ipconfig getifaddr en0);

  echo "Local IP Address is ${ip}"
  echo "Building Tag ${dockertag}"
  nvm install 6.9.1
  gulp && docker build -t mystrength/admin:${dockertag} .
  docker rm -f $(docker ps -a | grep admin.mystrength.dev | awk '{print $1}')  > /dev/null 2>&1
  docker run -d -t \
    -e "MYSTRENGTH_ENV=dev" \
    -e "VIRTUAL_HOST=admin.mystrength.dev,admin-gemini.mystrength.dev" \
    -e VIRTUAL_PORT=80 \
    -h admin.mystrength.dev  --name admin.mystrength.dev \
    mystrength/admin:${dockertag}
}

function buildanalytics() {
  if [ -z "${1}" ]; then
    echo "ERROR: No docker tag specified.";
    return 1;
  fi;
  local dockertag="${1}";
  local ip=$(ipconfig getifaddr en0);

  echo "Local IP Address is ${ip}"
  echo "Building Tag ${dockertag}"
  docker build -t mystrength/analytics:${dockertag} .
  docker rm -f $(docker ps -a | grep mystrength_analytics | awk '{print $1}')  > /dev/null 2>&1
  docker run -dt --name mystrength_analytics \
       --add-host=db.mystrength.dev:${ip} \
       --link devrabbit:rabbit.mystrength.dev \
       -v /Users/NNieslanik/src/analytics/nightly/logs:/var/log/mystrength \
       -v /Users/NNieslanik/src/analytics/nightly/work:/home/work \
       -e ENV_NAME=nnieslanik \
       --restart=on-failure:5 \
       mystrength/analytics:${dockertag}
}


function buildrec() {
  if [ -z "${1}" ]; then
    echo "ERROR: No docker tag specified.";
    return 1;
  fi;
  local dockertag="${1}";
  local ip=$(ipconfig getifaddr en0);

  echo "Local IP Address is ${ip}"
  echo "Building Tag ${dockertag}"
  docker build -f RecommenderDockerfile -t mystrength/recommenders:${dockertag} .
  docker rm -f $(docker ps -a | grep recommenders.mystrength.dev | awk '{print $1}')  > /dev/null 2>&1
  docker run -dt --name recommenders.mystrength.dev \
       --add-host=db.mystrength.dev:${ip} \
       --link devrabbit:rabbit.mystrength.dev \
       -v /Users/NNieslanik/src/recommenders/logs:/var/log/mystrength \
       -v /Users/NNieslanik/src/recommenders/work:/home/work \
       -e ENV_NAME=nnieslanik \
       --restart=on-failure:5 \
       mystrength/recommenders:${dockertag}
}

function buildapi() {
  if [ -z "${1}" ]; then
    echo "ERROR: No docker tag specified.";
    return 1;
  fi;
  local dockertag="${1}";
  local ip=$(ipconfig getifaddr en0);

  echo "Local IP Address is ${ip}"
  echo "Building Tag ${dockertag}"
  mvn versions:set -DnewVersion=${dockertag} \
   -DgenerateBackupPoms=false \
   -DautoVersionSubmodules=true

  mvn clean install -DskipITs=true \
   && docker build -t mystrength/api:${dockertag} .
  docker rm -f $(docker ps -a | grep api.mystrength.dev | awk '{print $1}')  > /dev/null 2>&1
  docker run -d -t  -p 9081:9081 -p 5050:5050  \
     --add-host=db.mystrength.dev:${ip} \
    -e "MYSTRENGTH_ENV=NNieslanik" \
    -e VIRTUAL_HOST=api.mystrength.dev \
    -e VIRTUAL_PORT=9080 \
    -e "JAVA_OPTS=-Xdebug -agentlib:jdwp=transport=dt_socket,address=5050,server=y,suspend=y"  \
    -h api.mystrength.dev  --name api.mystrength.dev \
    --volumes-from=data.mystrength.dev \
    --link nginx:gemini.mystrength.dev \
    --link elasticsearch-1:es.mystrength.dev \
    --link devrabbit:rabbit.mystrength.dev \
    mystrength/api:${dockertag}
}

function runapi() {
if [ -z "${1}" ]; then
  echo "ERROR: No docker tag specified.";
  return 1;
fi;
local dockertag="${1}";
local ip=$(ipconfig getifaddr en0);

echo "Local IP Address is ${ip}"
echo "Running Tag ${dockertag}"

docker rm -f $(docker ps -a | grep api.mystrength.dev | awk '{print $1}') > /dev/null 2>&1
docker run -d -t  -p 9081:9081 -p 5050:5050  \
  --add-host=db.mystrength.dev:${ip} \
  -e "MYSTRENGTH_ENV=NNieslanik" \
  -e VIRTUAL_HOST=api.mystrength.dev \
  -e VIRTUAL_PORT=9080 \
  -e "JAVA_OPTS=-Xdebug -agentlib:jdwp=transport=dt_socket,address=5050,server=y,suspend=y"  \
  -h api.mystrength.dev  --name api.mystrength.dev \
  --volumes-from=data.mystrength.dev \
  --link nginx:gemini.mystrength.dev \
  --link elasticsearch-1:es.mystrength.dev \
  --link devrabbit:rabbit.mystrength.dev \
  mystrength/api:${dockertag}
}

function buildgemini() {

if [ -z "${1}" ]; then
  echo "ERROR: No docker tag specified.";
  return 1;
fi;
local dockertag="${1}";
local ip=$(ipconfig getifaddr en0);

echo "Local IP Address is ${ip}"
echo "Building and Running Tag ${dockertag}"
mvn clean compile jar:jar package \
  && ant \
  && docker build -t mystrength/gemini:${dockertag} .
docker rm -f $(docker ps -a | grep gemini.mystrength.dev | awk '{print $1}') > /dev/null 2>&1
docker run -d -t -p 5051:5051 -p 5005:5005 -p 6810:6810  \
  --volumes-from=data.mystrength.dev \
  --add-host=db.mystrength.dev:${ip} \
  -e "MYSTRENGTH_ENV=NNieslanik" \
  -e "DEBUG_MODE=true" \
  -h gemini.mystrength.dev \
  --name gemini.mystrength.dev \
  -e VIRTUAL_HOST=gemini.mystrength.dev,mystrength.dev -e VIRTUAL_PORT=8080 \
  --link nginx:api.mystrength.dev \
  --link elasticsearch-1:es.mystrength.dev \
  mystrength/gemini:${dockertag} debug

}

function buildjobs() {
  if [ -z "${1}" ]; then
    echo "ERROR: No docker tag specified.";
    return 1;
  fi;
  local dockertag="${1}";
  local ip=$(ipconfig getifaddr en0);

  echo "Local IP Address is ${ip}"
  echo "Building Tag ${dockertag}"
  mvn versions:set -DnewVersion=${dockertag} \
   -DgenerateBackupPoms=false \
   -DautoVersionSubmodules=true

  mvn clean install -DskipITs=true;
  pushd orchestrator;
  docker build -t mystrength/jobs-orchestrator:${dockertag} .;
  docker rm -f $(docker ps -a | grep jobs-orchestrator.mystrength.dev | awk '{print $1}')  > /dev/null 2>&1
  docker run -d -t -p 5052:5052 \
     --add-host=db.mystrength.dev:${ip} \
    -e "MYSTRENGTH_ENV=NNieslanik" \
    -e VIRTUAL_HOST=jobs-orchestrator.mystrength.dev \
    -e "JAVA_OPTS=-Xdebug -agentlib:jdwp=transport=dt_socket,address=5052,server=y,suspend=y"  \
    -h jobs-orchestrator.mystrength.dev  --name jobs-orchestrator.mystrength.dev \
    --link nginx:gemini.mystrength.dev \
    --link nginx:api.mystrength.dev \
    --link elasticsearch-1:es.mystrength.dev \
    --link devrabbit:rabbit.mystrength.dev \
    mystrength/jobs-orchestrator:${dockertag};
  popd;
  pushd executor;
  docker build -t mystrength/jobs-executor:${dockertag} .;
  docker rm -f $(docker ps -a | grep jobs-executor.mystrength.dev | awk '{print $1}')  > /dev/null 2>&1
  docker run -d -t -p 5053:5053 \
     --add-host=db.mystrength.dev:${ip} \
    -e "MYSTRENGTH_ENV=NNieslanik" \
    -e VIRTUAL_HOST=jobs-executor.mystrength.dev \
    -e "JAVA_OPTS=-Xdebug -agentlib:jdwp=transport=dt_socket,address=5053,server=y,suspend=y"  \
    -h jobs-executor.mystrength.dev  --name jobs-executor.mystrength.dev \
    --link nginx:gemini.mystrength.dev \
    --link nginx:api.mystrength.dev \
    --link elasticsearch-1:es.mystrength.dev \
    --link devrabbit:rabbit.mystrength.dev \
    mystrength/jobs-executor:${dockertag};
  popd;

}

function buildpartnerapi() {
  if [ -z "${1}" ]; then
    echo "ERROR: No docker tag specified.";
    return 1;
  fi;
  local dockertag="${1}";
  local ip=$(ipconfig getifaddr en0);

  echo "Local IP Address is ${ip}"
  echo "Building Tag ${dockertag}"
  mvn versions:set -DnewVersion=${dockertag} \
   -DgenerateBackupPoms=false \
   -DautoVersionSubmodules=true

  mvn clean install -DskipITs=true \
   && docker build -t mystrength/partner-api:${dockertag} .
  docker rm -f $(docker ps -a | grep partner.mystrength.dev | awk '{print $1}')  > /dev/null 2>&1
  docker run -d -t  -p 5054:5054  \
     --add-host=db.mystrength.dev:${ip} \
    -e "MYSTRENGTH_ENV=NNieslanik" \
    -e VIRTUAL_HOST=partner.mystrength.dev \
    -e VIRTUAL_PORT=9080 \
    -e "JAVA_OPTS=-Xdebug -agentlib:jdwp=transport=dt_socket,address=5054,server=y,suspend=y"  \
    -h partner.mystrength.dev  --name partner.mystrength.dev \
    --link nginx:api.mystrength.dev \
    --link devrabbit:rabbit.mystrength.dev \
    mystrength/partner-api:${dockertag}
}



function createBuildNumber() {
  local versionPrefix=$(echo "2.1-SNAPSHOT" | cut -d- -f1)
  echo "Parsed version prefix sans SNAPSHOT ${versionPrefix}"

}

# Change cd function to enable to "back directory"
function cd() {
        if [ $# -lt 1 ]; then
                pushd ~ > /dev/null
        else
                pushd "$@" > /dev/null
        fi
}
alias bd='popd > /dev/null; pwd'
